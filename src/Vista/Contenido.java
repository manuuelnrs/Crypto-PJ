package Vista;

// GUI Component Library
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

// Algorithms Encryption | Decryption


// Algorithms Hash Operations
import SHA2.Sha2b384;
import SHA2.Sha2b512;
import SHA3.Sha3b384;
import SHA3.Sha3b512;



public class Contenido extends javax.swing.JFrame {
    // Variables
    DefaultTableModel dtmHash = new DefaultTableModel();
    ArrayList<String> TestVectors = new ArrayList<>();
    
    // MÃ©todos
    public Contenido() throws Exception {
        initComponents();
        setModelo();
    }
    
    private void setModelo() throws Exception{
        String[] cabecera = {"Hash Operations", "SHA-2 384", "SHA-2 512", "SHA-3 384", "SHA-3 512"  };
        dtmHash.setColumnIdentifiers(cabecera);
        JTableHash.setModel(dtmHash);
        // Tests
        HashOperations();
        
        // SetTable
        String[] datos = new String[dtmHash.getColumnCount()];
        int i = 0;
        
        for(String TestVector : TestVectors){
            datos[i++] = TestVector;
        }
        dtmHash.addRow(datos);
    }
    
    /* --------------- Tests Efficiency --------------- */
    private void HashOperations() throws Exception
    {
            String input = "Each algorithm is used for some goal; therefore, you need to compare only the ones that share such a goal.";
            Sha2b384 cipher = new Sha2b384();

            System.out.println("****Algorithm Sha-2 384 bits***");
            System.out.println("Input          : " + input);

            System.out.println("\n---Hashing---");

            long startTime1 = System.nanoTime();
            System.out.println("Hash: "  + cipher.hashing(input));
            long endTime1 = System.nanoTime(); 
            String time = (endTime1 - startTime1)/1e6 + " ms";
            System.out.println("Hashing Time: " + time);
            
            TestVectors.add("Vector 1");
            TestVectors.add(time);
            /////////////////////////////////
            Sha2b512 cipher2 = new Sha2b512();

            System.out.println("****Algorithm Sha-2 512 bits***");
            System.out.println("Input          : " + input);

            System.out.println("\n---Hashing---");

            startTime1 = System.nanoTime(); 
            System.out.println("Hash: "  + cipher2.hashing(input));
            endTime1 = System.nanoTime();
            time = (endTime1 - startTime1)/1e6 + " ms";
            System.out.println("Decryption Time: " + time);
            TestVectors.add(time);
            /////////////////////////////////
            Sha3b384 cipher3 = new Sha3b384();

            System.out.println("****Algorithm Sha-3 384 bits***");
            System.out.println("Input          : " + input);

            System.out.println("\n---Hashing---");

            startTime1 = System.nanoTime();
            //System.out.println("Hash: "  + cipher3.hashing(input));
            endTime1 = System.nanoTime(); 

            time = (endTime1 - startTime1)/1e6 + " ms";
            System.out.println("Decryption Time: " + time);
            TestVectors.add("REVISAR");
            /////////////////////////////////
            Sha3b512 cipher4 = new Sha3b512();

            System.out.println("****Algorithm Sha-3 512 bits***");
            System.out.println("Input          : " + input);

            System.out.println("\n---Hashing---");

            startTime1 = System.nanoTime();
            //System.out.println("Hash: "  + cipher4.hashing(input));
            endTime1 = System.nanoTime(); 

            time = (endTime1 - startTime1)/1e6 + " ms";
            System.out.println("Decryption Time: " + time);
            TestVectors.add("REVISAR");
    }
    
    
    /* --------------- Tests Efficiency --------------- */

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ScrollHash = new javax.swing.JScrollPane();
        JTableHash = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Algorithm Comparison");
        setResizable(false);

        JTableHash.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        ScrollHash.setViewportView(JTableHash);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ScrollHash, javax.swing.GroupLayout.DEFAULT_SIZE, 569, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ScrollHash, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Contenido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Contenido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Contenido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Contenido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Contenido().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(Contenido.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable JTableHash;
    private javax.swing.JScrollPane ScrollHash;
    // End of variables declaration//GEN-END:variables
}
